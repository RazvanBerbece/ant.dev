name: Validate Terraform

on:
  pull_request:
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'README.md'
      - '.gitignore'
      - 'src/**'
      - 'test/**'
      - '*.go'
      - 'go.sum'
      - 'go.mod'
  workflow_call:

env:
  TF_IN_AUTOMATION: "1"
  TF_VAR_PROJECT_ID: ${{ secrets.GC_PROJECT_ID }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PATH }}

jobs:

  validate:
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4.1.7

      - name: Setup Environment
        run: |
          mkdir keys
          echo "${{ secrets.GC_SERVICE_ACCOUNT_BASE64 }}" | base64 --decode | jq > ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_PATH }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
            cli_config_credentials_token: ${{ secrets.HCP_TF_TOKEN }}

      - name: Run 'terraform fmt'
        id: fmt
        run: terraform fmt -check -recursive
      
      - name: Run 'terraform init'
        id: init
        run: |
          terraform init -upgrade
       
      - name: Run 'terraform validate'
        id: validate
        run: terraform validate -no-color

      - name: Run 'terraform plan'
        id: planStep
        run: |
          terraform plan -input=false
      
      # On PR events, comment on the PR with the TF step statuses
      # The always() allows this step to run regardless of whether the steps above failed, as we want to see which stage failed
      - name: Update PR with Terraform quality step outputs
        uses: actions/github-script@v7.0.1
        if: github.event_name == 'pull_request' && always()
        with:
          github-token: ${{ secrets.DEV_BOT_TOKEN }}
          script: |
            const output = `## Terraform Quality Check Update ü§ñ
            This is an automated message generated by the CI run. It displays the statuses of the formatting, initialisation, validation and planning of the Terraform source files.
            
            ## Quality Check 
            üñå Terraform Format and Style: <code>${{ steps.fmt.outcome }}</code>
            ‚öôÔ∏è Terraform Initialization: <code>${{ steps.init.outcome }}</code>
            ‚úîÔ∏è Terraform Validation: <code>${{ steps.validate.outcome }}</code>

            ## Plan 
            üìã Check the full plan output here: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })